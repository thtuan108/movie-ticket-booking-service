// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package book

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookerClient is the client API for Booker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookerClient interface {
	ListMovie(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (Booker_ListMovieClient, error)
	ListGenres(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (Booker_ListGenresClient, error)
	ListShowTimes(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (Booker_ListShowTimesClient, error)
	MoviesByTitle(ctx context.Context, in *QueryParam, opts ...grpc.CallOption) (Booker_MoviesByTitleClient, error)
	MoviesByGenre(ctx context.Context, in *QueryParam, opts ...grpc.CallOption) (Booker_MoviesByGenreClient, error)
	MoviesByTime(ctx context.Context, in *QueryParam, opts ...grpc.CallOption) (Booker_MoviesByTimeClient, error)
	BuyTicket(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*NoParam, error)
}

type bookerClient struct {
	cc grpc.ClientConnInterface
}

func NewBookerClient(cc grpc.ClientConnInterface) BookerClient {
	return &bookerClient{cc}
}

func (c *bookerClient) ListMovie(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (Booker_ListMovieClient, error) {
	stream, err := c.cc.NewStream(ctx, &Booker_ServiceDesc.Streams[0], "/book.Booker/ListMovie", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookerListMovieClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Booker_ListMovieClient interface {
	Recv() (*Options, error)
	grpc.ClientStream
}

type bookerListMovieClient struct {
	grpc.ClientStream
}

func (x *bookerListMovieClient) Recv() (*Options, error) {
	m := new(Options)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookerClient) ListGenres(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (Booker_ListGenresClient, error) {
	stream, err := c.cc.NewStream(ctx, &Booker_ServiceDesc.Streams[1], "/book.Booker/ListGenres", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookerListGenresClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Booker_ListGenresClient interface {
	Recv() (*Options, error)
	grpc.ClientStream
}

type bookerListGenresClient struct {
	grpc.ClientStream
}

func (x *bookerListGenresClient) Recv() (*Options, error) {
	m := new(Options)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookerClient) ListShowTimes(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (Booker_ListShowTimesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Booker_ServiceDesc.Streams[2], "/book.Booker/ListShowTimes", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookerListShowTimesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Booker_ListShowTimesClient interface {
	Recv() (*Options, error)
	grpc.ClientStream
}

type bookerListShowTimesClient struct {
	grpc.ClientStream
}

func (x *bookerListShowTimesClient) Recv() (*Options, error) {
	m := new(Options)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookerClient) MoviesByTitle(ctx context.Context, in *QueryParam, opts ...grpc.CallOption) (Booker_MoviesByTitleClient, error) {
	stream, err := c.cc.NewStream(ctx, &Booker_ServiceDesc.Streams[3], "/book.Booker/MoviesByTitle", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookerMoviesByTitleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Booker_MoviesByTitleClient interface {
	Recv() (*Movie, error)
	grpc.ClientStream
}

type bookerMoviesByTitleClient struct {
	grpc.ClientStream
}

func (x *bookerMoviesByTitleClient) Recv() (*Movie, error) {
	m := new(Movie)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookerClient) MoviesByGenre(ctx context.Context, in *QueryParam, opts ...grpc.CallOption) (Booker_MoviesByGenreClient, error) {
	stream, err := c.cc.NewStream(ctx, &Booker_ServiceDesc.Streams[4], "/book.Booker/MoviesByGenre", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookerMoviesByGenreClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Booker_MoviesByGenreClient interface {
	Recv() (*Movie, error)
	grpc.ClientStream
}

type bookerMoviesByGenreClient struct {
	grpc.ClientStream
}

func (x *bookerMoviesByGenreClient) Recv() (*Movie, error) {
	m := new(Movie)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookerClient) MoviesByTime(ctx context.Context, in *QueryParam, opts ...grpc.CallOption) (Booker_MoviesByTimeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Booker_ServiceDesc.Streams[5], "/book.Booker/MoviesByTime", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookerMoviesByTimeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Booker_MoviesByTimeClient interface {
	Recv() (*Movie, error)
	grpc.ClientStream
}

type bookerMoviesByTimeClient struct {
	grpc.ClientStream
}

func (x *bookerMoviesByTimeClient) Recv() (*Movie, error) {
	m := new(Movie)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookerClient) BuyTicket(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*NoParam, error) {
	out := new(NoParam)
	err := c.cc.Invoke(ctx, "/book.Booker/BuyTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookerServer is the server API for Booker service.
// All implementations must embed UnimplementedBookerServer
// for forward compatibility
type BookerServer interface {
	ListMovie(*NoParam, Booker_ListMovieServer) error
	ListGenres(*NoParam, Booker_ListGenresServer) error
	ListShowTimes(*NoParam, Booker_ListShowTimesServer) error
	MoviesByTitle(*QueryParam, Booker_MoviesByTitleServer) error
	MoviesByGenre(*QueryParam, Booker_MoviesByGenreServer) error
	MoviesByTime(*QueryParam, Booker_MoviesByTimeServer) error
	BuyTicket(context.Context, *BuyRequest) (*NoParam, error)
	mustEmbedUnimplementedBookerServer()
}

// UnimplementedBookerServer must be embedded to have forward compatible implementations.
type UnimplementedBookerServer struct {
}

func (UnimplementedBookerServer) ListMovie(*NoParam, Booker_ListMovieServer) error {
	return status.Errorf(codes.Unimplemented, "method ListMovie not implemented")
}
func (UnimplementedBookerServer) ListGenres(*NoParam, Booker_ListGenresServer) error {
	return status.Errorf(codes.Unimplemented, "method ListGenres not implemented")
}
func (UnimplementedBookerServer) ListShowTimes(*NoParam, Booker_ListShowTimesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListShowTimes not implemented")
}
func (UnimplementedBookerServer) MoviesByTitle(*QueryParam, Booker_MoviesByTitleServer) error {
	return status.Errorf(codes.Unimplemented, "method MoviesByTitle not implemented")
}
func (UnimplementedBookerServer) MoviesByGenre(*QueryParam, Booker_MoviesByGenreServer) error {
	return status.Errorf(codes.Unimplemented, "method MoviesByGenre not implemented")
}
func (UnimplementedBookerServer) MoviesByTime(*QueryParam, Booker_MoviesByTimeServer) error {
	return status.Errorf(codes.Unimplemented, "method MoviesByTime not implemented")
}
func (UnimplementedBookerServer) BuyTicket(context.Context, *BuyRequest) (*NoParam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyTicket not implemented")
}
func (UnimplementedBookerServer) mustEmbedUnimplementedBookerServer() {}

// UnsafeBookerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookerServer will
// result in compilation errors.
type UnsafeBookerServer interface {
	mustEmbedUnimplementedBookerServer()
}

func RegisterBookerServer(s grpc.ServiceRegistrar, srv BookerServer) {
	s.RegisterService(&Booker_ServiceDesc, srv)
}

func _Booker_ListMovie_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookerServer).ListMovie(m, &bookerListMovieServer{stream})
}

type Booker_ListMovieServer interface {
	Send(*Options) error
	grpc.ServerStream
}

type bookerListMovieServer struct {
	grpc.ServerStream
}

func (x *bookerListMovieServer) Send(m *Options) error {
	return x.ServerStream.SendMsg(m)
}

func _Booker_ListGenres_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookerServer).ListGenres(m, &bookerListGenresServer{stream})
}

type Booker_ListGenresServer interface {
	Send(*Options) error
	grpc.ServerStream
}

type bookerListGenresServer struct {
	grpc.ServerStream
}

func (x *bookerListGenresServer) Send(m *Options) error {
	return x.ServerStream.SendMsg(m)
}

func _Booker_ListShowTimes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookerServer).ListShowTimes(m, &bookerListShowTimesServer{stream})
}

type Booker_ListShowTimesServer interface {
	Send(*Options) error
	grpc.ServerStream
}

type bookerListShowTimesServer struct {
	grpc.ServerStream
}

func (x *bookerListShowTimesServer) Send(m *Options) error {
	return x.ServerStream.SendMsg(m)
}

func _Booker_MoviesByTitle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookerServer).MoviesByTitle(m, &bookerMoviesByTitleServer{stream})
}

type Booker_MoviesByTitleServer interface {
	Send(*Movie) error
	grpc.ServerStream
}

type bookerMoviesByTitleServer struct {
	grpc.ServerStream
}

func (x *bookerMoviesByTitleServer) Send(m *Movie) error {
	return x.ServerStream.SendMsg(m)
}

func _Booker_MoviesByGenre_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookerServer).MoviesByGenre(m, &bookerMoviesByGenreServer{stream})
}

type Booker_MoviesByGenreServer interface {
	Send(*Movie) error
	grpc.ServerStream
}

type bookerMoviesByGenreServer struct {
	grpc.ServerStream
}

func (x *bookerMoviesByGenreServer) Send(m *Movie) error {
	return x.ServerStream.SendMsg(m)
}

func _Booker_MoviesByTime_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookerServer).MoviesByTime(m, &bookerMoviesByTimeServer{stream})
}

type Booker_MoviesByTimeServer interface {
	Send(*Movie) error
	grpc.ServerStream
}

type bookerMoviesByTimeServer struct {
	grpc.ServerStream
}

func (x *bookerMoviesByTimeServer) Send(m *Movie) error {
	return x.ServerStream.SendMsg(m)
}

func _Booker_BuyTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookerServer).BuyTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.Booker/BuyTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookerServer).BuyTicket(ctx, req.(*BuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Booker_ServiceDesc is the grpc.ServiceDesc for Booker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Booker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "book.Booker",
	HandlerType: (*BookerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuyTicket",
			Handler:    _Booker_BuyTicket_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListMovie",
			Handler:       _Booker_ListMovie_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListGenres",
			Handler:       _Booker_ListGenres_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListShowTimes",
			Handler:       _Booker_ListShowTimes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MoviesByTitle",
			Handler:       _Booker_MoviesByTitle_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MoviesByGenre",
			Handler:       _Booker_MoviesByGenre_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MoviesByTime",
			Handler:       _Booker_MoviesByTime_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "book/book.proto",
}
